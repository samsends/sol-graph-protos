// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: struct_def.proto

package sol

/*
	Package Name:
*/

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type StructDef_FieldDef_FieldTypeDef int32

const (
	StructDef_FieldDef_STRING      StructDef_FieldDef_FieldTypeDef = 0
	StructDef_FieldDef_BYTES       StructDef_FieldDef_FieldTypeDef = 1
	StructDef_FieldDef_INT64       StructDef_FieldDef_FieldTypeDef = 2
	StructDef_FieldDef_FLOAT       StructDef_FieldDef_FieldTypeDef = 3
	StructDef_FieldDef_BOOL        StructDef_FieldDef_FieldTypeDef = 4
	StructDef_FieldDef_LIST_STRING StructDef_FieldDef_FieldTypeDef = 5
	StructDef_FieldDef_LIST_BYTES  StructDef_FieldDef_FieldTypeDef = 6
	StructDef_FieldDef_LIST_INT64  StructDef_FieldDef_FieldTypeDef = 7
	StructDef_FieldDef_LIST_FLOAT  StructDef_FieldDef_FieldTypeDef = 8
	StructDef_FieldDef_LIST_BOOL   StructDef_FieldDef_FieldTypeDef = 9
)

var StructDef_FieldDef_FieldTypeDef_name = map[int32]string{
	0: "STRING",
	1: "BYTES",
	2: "INT64",
	3: "FLOAT",
	4: "BOOL",
	5: "LIST_STRING",
	6: "LIST_BYTES",
	7: "LIST_INT64",
	8: "LIST_FLOAT",
	9: "LIST_BOOL",
}
var StructDef_FieldDef_FieldTypeDef_value = map[string]int32{
	"STRING":      0,
	"BYTES":       1,
	"INT64":       2,
	"FLOAT":       3,
	"BOOL":        4,
	"LIST_STRING": 5,
	"LIST_BYTES":  6,
	"LIST_INT64":  7,
	"LIST_FLOAT":  8,
	"LIST_BOOL":   9,
}

func (x StructDef_FieldDef_FieldTypeDef) String() string {
	return proto.EnumName(StructDef_FieldDef_FieldTypeDef_name, int32(x))
}
func (StructDef_FieldDef_FieldTypeDef) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_struct_def_e594dbeaff286bb7, []int{0, 0, 0}
}

type StructDef struct {
	Name        string                `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Description string                `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	Fields      []*StructDef_FieldDef `protobuf:"bytes,3,rep,name=Fields,proto3" json:"Fields,omitempty"`
	Deprecation *StructDeprecationDef `protobuf:"bytes,4,opt,name=Deprecation,proto3" json:"Deprecation,omitempty"`
}

func (m *StructDef) Reset()      { *m = StructDef{} }
func (*StructDef) ProtoMessage() {}
func (*StructDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_struct_def_e594dbeaff286bb7, []int{0}
}
func (m *StructDef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StructDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StructDef.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StructDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StructDef.Merge(dst, src)
}
func (m *StructDef) XXX_Size() int {
	return m.Size()
}
func (m *StructDef) XXX_DiscardUnknown() {
	xxx_messageInfo_StructDef.DiscardUnknown(m)
}

var xxx_messageInfo_StructDef proto.InternalMessageInfo

func (m *StructDef) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StructDef) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *StructDef) GetFields() []*StructDef_FieldDef {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *StructDef) GetDeprecation() *StructDeprecationDef {
	if m != nil {
		return m.Deprecation
	}
	return nil
}

type StructDef_FieldDef struct {
	Name string                          `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Type StructDef_FieldDef_FieldTypeDef `protobuf:"varint,2,opt,name=Type,proto3,enum=sol.StructDef_FieldDef_FieldTypeDef" json:"Type,omitempty"`
	// Human-readable description.
	Description string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	// Whether this attribute is required.
	Required bool `protobuf:"varint,4,opt,name=Required,proto3" json:"Required,omitempty"`
}

func (m *StructDef_FieldDef) Reset()      { *m = StructDef_FieldDef{} }
func (*StructDef_FieldDef) ProtoMessage() {}
func (*StructDef_FieldDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_struct_def_e594dbeaff286bb7, []int{0, 0}
}
func (m *StructDef_FieldDef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StructDef_FieldDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StructDef_FieldDef.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StructDef_FieldDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StructDef_FieldDef.Merge(dst, src)
}
func (m *StructDef_FieldDef) XXX_Size() int {
	return m.Size()
}
func (m *StructDef_FieldDef) XXX_DiscardUnknown() {
	xxx_messageInfo_StructDef_FieldDef.DiscardUnknown(m)
}

var xxx_messageInfo_StructDef_FieldDef proto.InternalMessageInfo

func (m *StructDef_FieldDef) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StructDef_FieldDef) GetType() StructDef_FieldDef_FieldTypeDef {
	if m != nil {
		return m.Type
	}
	return StructDef_FieldDef_STRING
}

func (m *StructDef_FieldDef) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *StructDef_FieldDef) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

type StructDeprecationDef struct {
	Version     int32  `protobuf:"varint,1,opt,name=Version,proto3" json:"Version,omitempty"`
	Explanation string `protobuf:"bytes,2,opt,name=Explanation,proto3" json:"Explanation,omitempty"`
}

func (m *StructDeprecationDef) Reset()      { *m = StructDeprecationDef{} }
func (*StructDeprecationDef) ProtoMessage() {}
func (*StructDeprecationDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_struct_def_e594dbeaff286bb7, []int{1}
}
func (m *StructDeprecationDef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StructDeprecationDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StructDeprecationDef.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StructDeprecationDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StructDeprecationDef.Merge(dst, src)
}
func (m *StructDeprecationDef) XXX_Size() int {
	return m.Size()
}
func (m *StructDeprecationDef) XXX_DiscardUnknown() {
	xxx_messageInfo_StructDeprecationDef.DiscardUnknown(m)
}

var xxx_messageInfo_StructDeprecationDef proto.InternalMessageInfo

func (m *StructDeprecationDef) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *StructDeprecationDef) GetExplanation() string {
	if m != nil {
		return m.Explanation
	}
	return ""
}

type StructListDef struct {
	Structs []*StructDef `protobuf:"bytes,1,rep,name=Structs,proto3" json:"Structs,omitempty"`
}

func (m *StructListDef) Reset()      { *m = StructListDef{} }
func (*StructListDef) ProtoMessage() {}
func (*StructListDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_struct_def_e594dbeaff286bb7, []int{2}
}
func (m *StructListDef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StructListDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StructListDef.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StructListDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StructListDef.Merge(dst, src)
}
func (m *StructListDef) XXX_Size() int {
	return m.Size()
}
func (m *StructListDef) XXX_DiscardUnknown() {
	xxx_messageInfo_StructListDef.DiscardUnknown(m)
}

var xxx_messageInfo_StructListDef proto.InternalMessageInfo

func (m *StructListDef) GetStructs() []*StructDef {
	if m != nil {
		return m.Structs
	}
	return nil
}

func init() {
	proto.RegisterType((*StructDef)(nil), "sol.StructDef")
	proto.RegisterType((*StructDef_FieldDef)(nil), "sol.StructDef.FieldDef")
	proto.RegisterType((*StructDeprecationDef)(nil), "sol.StructDeprecationDef")
	proto.RegisterType((*StructListDef)(nil), "sol.StructListDef")
	proto.RegisterEnum("sol.StructDef_FieldDef_FieldTypeDef", StructDef_FieldDef_FieldTypeDef_name, StructDef_FieldDef_FieldTypeDef_value)
}
func (this *StructDef) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*StructDef)
	if !ok {
		that2, ok := that.(StructDef)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *StructDef")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *StructDef but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *StructDef but is not nil && this == nil")
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Description != that1.Description {
		return fmt.Errorf("Description this(%v) Not Equal that(%v)", this.Description, that1.Description)
	}
	if len(this.Fields) != len(that1.Fields) {
		return fmt.Errorf("Fields this(%v) Not Equal that(%v)", len(this.Fields), len(that1.Fields))
	}
	for i := range this.Fields {
		if !this.Fields[i].Equal(that1.Fields[i]) {
			return fmt.Errorf("Fields this[%v](%v) Not Equal that[%v](%v)", i, this.Fields[i], i, that1.Fields[i])
		}
	}
	if !this.Deprecation.Equal(that1.Deprecation) {
		return fmt.Errorf("Deprecation this(%v) Not Equal that(%v)", this.Deprecation, that1.Deprecation)
	}
	return nil
}
func (this *StructDef) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StructDef)
	if !ok {
		that2, ok := that.(StructDef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.Fields) != len(that1.Fields) {
		return false
	}
	for i := range this.Fields {
		if !this.Fields[i].Equal(that1.Fields[i]) {
			return false
		}
	}
	if !this.Deprecation.Equal(that1.Deprecation) {
		return false
	}
	return true
}
func (this *StructDef_FieldDef) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*StructDef_FieldDef)
	if !ok {
		that2, ok := that.(StructDef_FieldDef)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *StructDef_FieldDef")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *StructDef_FieldDef but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *StructDef_FieldDef but is not nil && this == nil")
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	if this.Description != that1.Description {
		return fmt.Errorf("Description this(%v) Not Equal that(%v)", this.Description, that1.Description)
	}
	if this.Required != that1.Required {
		return fmt.Errorf("Required this(%v) Not Equal that(%v)", this.Required, that1.Required)
	}
	return nil
}
func (this *StructDef_FieldDef) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StructDef_FieldDef)
	if !ok {
		that2, ok := that.(StructDef_FieldDef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Required != that1.Required {
		return false
	}
	return true
}
func (this *StructDeprecationDef) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*StructDeprecationDef)
	if !ok {
		that2, ok := that.(StructDeprecationDef)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *StructDeprecationDef")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *StructDeprecationDef but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *StructDeprecationDef but is not nil && this == nil")
	}
	if this.Version != that1.Version {
		return fmt.Errorf("Version this(%v) Not Equal that(%v)", this.Version, that1.Version)
	}
	if this.Explanation != that1.Explanation {
		return fmt.Errorf("Explanation this(%v) Not Equal that(%v)", this.Explanation, that1.Explanation)
	}
	return nil
}
func (this *StructDeprecationDef) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StructDeprecationDef)
	if !ok {
		that2, ok := that.(StructDeprecationDef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.Explanation != that1.Explanation {
		return false
	}
	return true
}
func (this *StructListDef) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*StructListDef)
	if !ok {
		that2, ok := that.(StructListDef)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *StructListDef")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *StructListDef but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *StructListDef but is not nil && this == nil")
	}
	if len(this.Structs) != len(that1.Structs) {
		return fmt.Errorf("Structs this(%v) Not Equal that(%v)", len(this.Structs), len(that1.Structs))
	}
	for i := range this.Structs {
		if !this.Structs[i].Equal(that1.Structs[i]) {
			return fmt.Errorf("Structs this[%v](%v) Not Equal that[%v](%v)", i, this.Structs[i], i, that1.Structs[i])
		}
	}
	return nil
}
func (this *StructListDef) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StructListDef)
	if !ok {
		that2, ok := that.(StructListDef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Structs) != len(that1.Structs) {
		return false
	}
	for i := range this.Structs {
		if !this.Structs[i].Equal(that1.Structs[i]) {
			return false
		}
	}
	return true
}
func (this *StructDef) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&sol.StructDef{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	if this.Fields != nil {
		s = append(s, "Fields: "+fmt.Sprintf("%#v", this.Fields)+",\n")
	}
	if this.Deprecation != nil {
		s = append(s, "Deprecation: "+fmt.Sprintf("%#v", this.Deprecation)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StructDef_FieldDef) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&sol.StructDef_FieldDef{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Required: "+fmt.Sprintf("%#v", this.Required)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StructDeprecationDef) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&sol.StructDeprecationDef{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "Explanation: "+fmt.Sprintf("%#v", this.Explanation)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StructListDef) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sol.StructListDef{")
	if this.Structs != nil {
		s = append(s, "Structs: "+fmt.Sprintf("%#v", this.Structs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringStructDef(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *StructDef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StructDef) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStructDef(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStructDef(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Fields) > 0 {
		for _, msg := range m.Fields {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintStructDef(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Deprecation != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintStructDef(dAtA, i, uint64(m.Deprecation.Size()))
		n1, err := m.Deprecation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *StructDef_FieldDef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StructDef_FieldDef) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStructDef(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStructDef(dAtA, i, uint64(m.Type))
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStructDef(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if m.Required {
		dAtA[i] = 0x20
		i++
		if m.Required {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *StructDeprecationDef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StructDeprecationDef) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStructDef(dAtA, i, uint64(m.Version))
	}
	if len(m.Explanation) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStructDef(dAtA, i, uint64(len(m.Explanation)))
		i += copy(dAtA[i:], m.Explanation)
	}
	return i, nil
}

func (m *StructListDef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StructListDef) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Structs) > 0 {
		for _, msg := range m.Structs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintStructDef(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintStructDef(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedStructDef(r randyStructDef, easy bool) *StructDef {
	this := &StructDef{}
	this.Name = string(randStringStructDef(r))
	this.Description = string(randStringStructDef(r))
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Fields = make([]*StructDef_FieldDef, v1)
		for i := 0; i < v1; i++ {
			this.Fields[i] = NewPopulatedStructDef_FieldDef(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.Deprecation = NewPopulatedStructDeprecationDef(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStructDef_FieldDef(r randyStructDef, easy bool) *StructDef_FieldDef {
	this := &StructDef_FieldDef{}
	this.Name = string(randStringStructDef(r))
	this.Type = StructDef_FieldDef_FieldTypeDef([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}[r.Intn(10)])
	this.Description = string(randStringStructDef(r))
	this.Required = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStructDeprecationDef(r randyStructDef, easy bool) *StructDeprecationDef {
	this := &StructDeprecationDef{}
	this.Version = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Version *= -1
	}
	this.Explanation = string(randStringStructDef(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStructListDef(r randyStructDef, easy bool) *StructListDef {
	this := &StructListDef{}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Structs = make([]*StructDef, v2)
		for i := 0; i < v2; i++ {
			this.Structs[i] = NewPopulatedStructDef(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyStructDef interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneStructDef(r randyStructDef) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringStructDef(r randyStructDef) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneStructDef(r)
	}
	return string(tmps)
}
func randUnrecognizedStructDef(r randyStructDef, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldStructDef(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldStructDef(dAtA []byte, r randyStructDef, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateStructDef(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateStructDef(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateStructDef(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateStructDef(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateStructDef(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateStructDef(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateStructDef(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *StructDef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStructDef(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovStructDef(uint64(l))
	}
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovStructDef(uint64(l))
		}
	}
	if m.Deprecation != nil {
		l = m.Deprecation.Size()
		n += 1 + l + sovStructDef(uint64(l))
	}
	return n
}

func (m *StructDef_FieldDef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStructDef(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovStructDef(uint64(m.Type))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovStructDef(uint64(l))
	}
	if m.Required {
		n += 2
	}
	return n
}

func (m *StructDeprecationDef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovStructDef(uint64(m.Version))
	}
	l = len(m.Explanation)
	if l > 0 {
		n += 1 + l + sovStructDef(uint64(l))
	}
	return n
}

func (m *StructListDef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Structs) > 0 {
		for _, e := range m.Structs {
			l = e.Size()
			n += 1 + l + sovStructDef(uint64(l))
		}
	}
	return n
}

func sovStructDef(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozStructDef(x uint64) (n int) {
	return sovStructDef(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *StructDef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StructDef{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Fields:` + strings.Replace(fmt.Sprintf("%v", this.Fields), "StructDef_FieldDef", "StructDef_FieldDef", 1) + `,`,
		`Deprecation:` + strings.Replace(fmt.Sprintf("%v", this.Deprecation), "StructDeprecationDef", "StructDeprecationDef", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StructDef_FieldDef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StructDef_FieldDef{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Required:` + fmt.Sprintf("%v", this.Required) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StructDeprecationDef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StructDeprecationDef{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Explanation:` + fmt.Sprintf("%v", this.Explanation) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StructListDef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StructListDef{`,
		`Structs:` + strings.Replace(fmt.Sprintf("%v", this.Structs), "StructDef", "StructDef", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringStructDef(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *StructDef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StructDef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StructDef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructDef
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &StructDef_FieldDef{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deprecation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructDef
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Deprecation == nil {
				m.Deprecation = &StructDeprecationDef{}
			}
			if err := m.Deprecation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStructDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StructDef_FieldDef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldDef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldDef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (StructDef_FieldDef_FieldTypeDef(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Required", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Required = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStructDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStructDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StructDeprecationDef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StructDeprecationDef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StructDeprecationDef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Explanation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStructDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Explanation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStructDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StructListDef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStructDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StructListDef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StructListDef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Structs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStructDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStructDef
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Structs = append(m.Structs, &StructDef{})
			if err := m.Structs[len(m.Structs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStructDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStructDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStructDef(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStructDef
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStructDef
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStructDef
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthStructDef
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStructDef
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStructDef(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStructDef = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStructDef   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("struct_def.proto", fileDescriptor_struct_def_e594dbeaff286bb7) }

var fileDescriptor_struct_def_e594dbeaff286bb7 = []byte{
	// 448 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x33, 0x4d, 0xda, 0x26, 0xaf, 0x6e, 0x0d, 0x83, 0x60, 0xec, 0x61, 0x28, 0xc1, 0x43,
	0x4f, 0x2d, 0xd4, 0x45, 0x14, 0x4f, 0x96, 0xee, 0x4a, 0x21, 0xb4, 0x30, 0x09, 0x82, 0xa7, 0x25,
	0xdb, 0x4e, 0x96, 0x40, 0xdc, 0xc4, 0x4c, 0x0a, 0x7a, 0xf3, 0x23, 0x78, 0xf1, 0x3b, 0x78, 0xf2,
	0xec, 0x47, 0xf0, 0xb8, 0xc7, 0x3d, 0x36, 0xe9, 0x17, 0xf0, 0xe8, 0x51, 0x66, 0x66, 0x1b, 0xb2,
	0x5a, 0x6f, 0xef, 0xff, 0xde, 0xfb, 0xff, 0xf2, 0xe6, 0xe5, 0x81, 0xcd, 0x8b, 0x7c, 0xbb, 0x2e,
	0x2e, 0x36, 0x2c, 0x1a, 0x67, 0x79, 0x5a, 0xa4, 0x58, 0xe7, 0x69, 0x32, 0x70, 0xaf, 0xd2, 0xab,
	0x74, 0x22, 0x13, 0x97, 0xdb, 0x68, 0x22, 0x94, 0x14, 0x32, 0x52, 0x8d, 0xee, 0x4e, 0x07, 0xcb,
	0x97, 0xee, 0x39, 0x8b, 0x30, 0x06, 0x63, 0x19, 0xbe, 0x67, 0x0e, 0x1a, 0xa2, 0x91, 0x45, 0x65,
	0x8c, 0x87, 0xd0, 0x9b, 0x33, 0xbe, 0xce, 0xe3, 0xac, 0x88, 0xd3, 0x6b, 0xa7, 0x25, 0x4b, 0xcd,
	0x14, 0x9e, 0x40, 0xe7, 0x3c, 0x66, 0xc9, 0x86, 0x3b, 0xfa, 0x50, 0x1f, 0xf5, 0xa6, 0x8f, 0xc7,
	0x3c, 0x4d, 0xc6, 0x35, 0x75, 0x2c, 0x8b, 0x73, 0x16, 0xd1, 0xbb, 0x36, 0xfc, 0x4a, 0x20, 0xb3,
	0x9c, 0xad, 0x43, 0x89, 0x34, 0x86, 0x68, 0xd4, 0x9b, 0x3e, 0xb9, 0xe7, 0xaa, 0xab, 0xc2, 0xd7,
	0xec, 0x1e, 0x7c, 0x6f, 0x81, 0x79, 0x20, 0x1e, 0x1d, 0xf8, 0x05, 0x18, 0xc1, 0xa7, 0x8c, 0xc9,
	0x49, 0xfb, 0xd3, 0xa7, 0xff, 0x19, 0x46, 0x05, 0xa2, 0x51, 0x7c, 0x41, 0x3a, 0xfe, 0x7e, 0xaa,
	0xfe, 0xef, 0x53, 0x07, 0x60, 0x52, 0xf6, 0x61, 0x1b, 0xe7, 0x6c, 0x23, 0xc7, 0x36, 0x69, 0xad,
	0xdd, 0xaf, 0x08, 0x1e, 0x34, 0xa1, 0x18, 0xa0, 0xe3, 0x07, 0x74, 0xb1, 0x7c, 0x63, 0x6b, 0xd8,
	0x82, 0xf6, 0xec, 0x5d, 0x70, 0xe6, 0xdb, 0x48, 0x84, 0x8b, 0x65, 0xf0, 0xfc, 0xd4, 0x6e, 0x89,
	0xf0, 0xdc, 0x5b, 0xbd, 0x0e, 0x6c, 0x1d, 0x9b, 0x60, 0xcc, 0x56, 0x2b, 0xcf, 0x36, 0xf0, 0x43,
	0xe8, 0x79, 0x0b, 0x3f, 0xb8, 0xb8, 0xf3, 0xb6, 0x71, 0x1f, 0x40, 0x26, 0x14, 0xa0, 0x53, 0x6b,
	0x45, 0xe9, 0xd6, 0x5a, 0xa1, 0x4c, 0x7c, 0x02, 0x96, 0xea, 0x17, 0x3c, 0xcb, 0xa5, 0xf0, 0xe8,
	0xd8, 0x56, 0xb1, 0x03, 0xdd, 0xb7, 0x2c, 0xe7, 0xe2, 0xa5, 0x62, 0x7d, 0x6d, 0x7a, 0x90, 0x62,
	0x0f, 0x67, 0x1f, 0xb3, 0x24, 0xbc, 0x0e, 0x9b, 0xbf, 0xbc, 0x91, 0x72, 0x5f, 0xc2, 0x89, 0x62,
	0x7a, 0x31, 0x97, 0x97, 0x33, 0x82, 0xae, 0x4a, 0x70, 0x07, 0xc9, 0x23, 0xe8, 0xdf, 0xdf, 0x3b,
	0x3d, 0x94, 0x67, 0xa7, 0xb7, 0x25, 0xd1, 0x76, 0x25, 0x41, 0xbf, 0x4a, 0x82, 0x7e, 0x97, 0x04,
	0x7d, 0xae, 0x08, 0xfa, 0x56, 0x11, 0xf4, 0xa3, 0x22, 0xe8, 0x67, 0x45, 0xd0, 0x4d, 0x45, 0xd0,
	0xae, 0x22, 0xe8, 0xcb, 0x9e, 0x68, 0x37, 0x7b, 0xa2, 0xdd, 0xee, 0x89, 0x76, 0xd9, 0x91, 0xe7,
	0xfa, 0xec, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x25, 0xff, 0xc3, 0x69, 0xeb, 0x02, 0x00, 0x00,
}
