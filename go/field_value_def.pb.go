// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: field_value_def.proto

package sol

/*
	Package Name:
*/

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type FieldValueDef struct {
	// Types that are valid to be assigned to Value:
	//	*FieldValueDef_String_
	//	*FieldValueDef_Byte
	//	*FieldValueDef_Int
	//	*FieldValueDef_Float
	//	*FieldValueDef_Bool
	//	*FieldValueDef_List
	Value isFieldValueDef_Value `protobuf_oneof:"Value"`
}

func (m *FieldValueDef) Reset()      { *m = FieldValueDef{} }
func (*FieldValueDef) ProtoMessage() {}
func (*FieldValueDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_field_value_def_3788bd7aa17b2384, []int{0}
}
func (m *FieldValueDef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FieldValueDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FieldValueDef.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FieldValueDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldValueDef.Merge(dst, src)
}
func (m *FieldValueDef) XXX_Size() int {
	return m.Size()
}
func (m *FieldValueDef) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldValueDef.DiscardUnknown(m)
}

var xxx_messageInfo_FieldValueDef proto.InternalMessageInfo

type isFieldValueDef_Value interface {
	isFieldValueDef_Value()
	Equal(interface{}) bool
	VerboseEqual(interface{}) error
	MarshalTo([]byte) (int, error)
	Size() int
}

type FieldValueDef_String_ struct {
	String_ string `protobuf:"bytes,1,opt,name=string,proto3,oneof"`
}
type FieldValueDef_Byte struct {
	Byte []byte `protobuf:"bytes,2,opt,name=byte,proto3,oneof"`
}
type FieldValueDef_Int struct {
	Int int64 `protobuf:"varint,3,opt,name=int,proto3,oneof"`
}
type FieldValueDef_Float struct {
	Float float32 `protobuf:"fixed32,4,opt,name=float,proto3,oneof"`
}
type FieldValueDef_Bool struct {
	Bool bool `protobuf:"varint,5,opt,name=bool,proto3,oneof"`
}
type FieldValueDef_List struct {
	List *FieldValueDef_ListValueDef `protobuf:"bytes,6,opt,name=list,proto3,oneof"`
}

func (*FieldValueDef_String_) isFieldValueDef_Value() {}
func (*FieldValueDef_Byte) isFieldValueDef_Value()    {}
func (*FieldValueDef_Int) isFieldValueDef_Value()     {}
func (*FieldValueDef_Float) isFieldValueDef_Value()   {}
func (*FieldValueDef_Bool) isFieldValueDef_Value()    {}
func (*FieldValueDef_List) isFieldValueDef_Value()    {}

func (m *FieldValueDef) GetValue() isFieldValueDef_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *FieldValueDef) GetString_() string {
	if x, ok := m.GetValue().(*FieldValueDef_String_); ok {
		return x.String_
	}
	return ""
}

func (m *FieldValueDef) GetByte() []byte {
	if x, ok := m.GetValue().(*FieldValueDef_Byte); ok {
		return x.Byte
	}
	return nil
}

func (m *FieldValueDef) GetInt() int64 {
	if x, ok := m.GetValue().(*FieldValueDef_Int); ok {
		return x.Int
	}
	return 0
}

func (m *FieldValueDef) GetFloat() float32 {
	if x, ok := m.GetValue().(*FieldValueDef_Float); ok {
		return x.Float
	}
	return 0
}

func (m *FieldValueDef) GetBool() bool {
	if x, ok := m.GetValue().(*FieldValueDef_Bool); ok {
		return x.Bool
	}
	return false
}

func (m *FieldValueDef) GetList() *FieldValueDef_ListValueDef {
	if x, ok := m.GetValue().(*FieldValueDef_List); ok {
		return x.List
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FieldValueDef) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FieldValueDef_OneofMarshaler, _FieldValueDef_OneofUnmarshaler, _FieldValueDef_OneofSizer, []interface{}{
		(*FieldValueDef_String_)(nil),
		(*FieldValueDef_Byte)(nil),
		(*FieldValueDef_Int)(nil),
		(*FieldValueDef_Float)(nil),
		(*FieldValueDef_Bool)(nil),
		(*FieldValueDef_List)(nil),
	}
}

func _FieldValueDef_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FieldValueDef)
	// Value
	switch x := m.Value.(type) {
	case *FieldValueDef_String_:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.String_)
	case *FieldValueDef_Byte:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.Byte)
	case *FieldValueDef_Int:
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Int))
	case *FieldValueDef_Float:
		_ = b.EncodeVarint(4<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(math.Float32bits(x.Float)))
	case *FieldValueDef_Bool:
		t := uint64(0)
		if x.Bool {
			t = 1
		}
		_ = b.EncodeVarint(5<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *FieldValueDef_List:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.List); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("FieldValueDef.Value has unexpected type %T", x)
	}
	return nil
}

func _FieldValueDef_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FieldValueDef)
	switch tag {
	case 1: // Value.string
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &FieldValueDef_String_{x}
		return true, err
	case 2: // Value.byte
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Value = &FieldValueDef_Byte{x}
		return true, err
	case 3: // Value.int
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &FieldValueDef_Int{int64(x)}
		return true, err
	case 4: // Value.float
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.Value = &FieldValueDef_Float{math.Float32frombits(uint32(x))}
		return true, err
	case 5: // Value.bool
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &FieldValueDef_Bool{x != 0}
		return true, err
	case 6: // Value.list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FieldValueDef_ListValueDef)
		err := b.DecodeMessage(msg)
		m.Value = &FieldValueDef_List{msg}
		return true, err
	default:
		return false, nil
	}
}

func _FieldValueDef_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FieldValueDef)
	// Value
	switch x := m.Value.(type) {
	case *FieldValueDef_String_:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.String_)))
		n += len(x.String_)
	case *FieldValueDef_Byte:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Byte)))
		n += len(x.Byte)
	case *FieldValueDef_Int:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Int))
	case *FieldValueDef_Float:
		n += 1 // tag and wire
		n += 4
	case *FieldValueDef_Bool:
		n += 1 // tag and wire
		n += 1
	case *FieldValueDef_List:
		s := proto.Size(x.List)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type FieldValueDef_ListValueDef struct {
	String_ []string  `protobuf:"bytes,1,rep,name=string,proto3" json:"string,omitempty"`
	Bytes   [][]byte  `protobuf:"bytes,2,rep,name=bytes,proto3" json:"bytes,omitempty"`
	Int64   []int64   `protobuf:"varint,3,rep,packed,name=int64,proto3" json:"int64,omitempty"`
	Float   []float32 `protobuf:"fixed32,4,rep,packed,name=float,proto3" json:"float,omitempty"`
	Bool    []bool    `protobuf:"varint,5,rep,packed,name=bool,proto3" json:"bool,omitempty"`
}

func (m *FieldValueDef_ListValueDef) Reset()      { *m = FieldValueDef_ListValueDef{} }
func (*FieldValueDef_ListValueDef) ProtoMessage() {}
func (*FieldValueDef_ListValueDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_field_value_def_3788bd7aa17b2384, []int{0, 0}
}
func (m *FieldValueDef_ListValueDef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FieldValueDef_ListValueDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FieldValueDef_ListValueDef.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FieldValueDef_ListValueDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldValueDef_ListValueDef.Merge(dst, src)
}
func (m *FieldValueDef_ListValueDef) XXX_Size() int {
	return m.Size()
}
func (m *FieldValueDef_ListValueDef) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldValueDef_ListValueDef.DiscardUnknown(m)
}

var xxx_messageInfo_FieldValueDef_ListValueDef proto.InternalMessageInfo

func (m *FieldValueDef_ListValueDef) GetString_() []string {
	if m != nil {
		return m.String_
	}
	return nil
}

func (m *FieldValueDef_ListValueDef) GetBytes() [][]byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

func (m *FieldValueDef_ListValueDef) GetInt64() []int64 {
	if m != nil {
		return m.Int64
	}
	return nil
}

func (m *FieldValueDef_ListValueDef) GetFloat() []float32 {
	if m != nil {
		return m.Float
	}
	return nil
}

func (m *FieldValueDef_ListValueDef) GetBool() []bool {
	if m != nil {
		return m.Bool
	}
	return nil
}

func init() {
	proto.RegisterType((*FieldValueDef)(nil), "sol.FieldValueDef")
	proto.RegisterType((*FieldValueDef_ListValueDef)(nil), "sol.FieldValueDef.ListValueDef")
}
func (this *FieldValueDef) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FieldValueDef)
	if !ok {
		that2, ok := that.(FieldValueDef)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FieldValueDef")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FieldValueDef but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FieldValueDef but is not nil && this == nil")
	}
	if that1.Value == nil {
		if this.Value != nil {
			return fmt.Errorf("this.Value != nil && that1.Value == nil")
		}
	} else if this.Value == nil {
		return fmt.Errorf("this.Value == nil && that1.Value != nil")
	} else if err := this.Value.VerboseEqual(that1.Value); err != nil {
		return err
	}
	return nil
}
func (this *FieldValueDef_String_) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FieldValueDef_String_)
	if !ok {
		that2, ok := that.(FieldValueDef_String_)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FieldValueDef_String_")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FieldValueDef_String_ but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FieldValueDef_String_ but is not nil && this == nil")
	}
	if this.String_ != that1.String_ {
		return fmt.Errorf("String_ this(%v) Not Equal that(%v)", this.String_, that1.String_)
	}
	return nil
}
func (this *FieldValueDef_Byte) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FieldValueDef_Byte)
	if !ok {
		that2, ok := that.(FieldValueDef_Byte)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FieldValueDef_Byte")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FieldValueDef_Byte but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FieldValueDef_Byte but is not nil && this == nil")
	}
	if !bytes.Equal(this.Byte, that1.Byte) {
		return fmt.Errorf("Byte this(%v) Not Equal that(%v)", this.Byte, that1.Byte)
	}
	return nil
}
func (this *FieldValueDef_Int) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FieldValueDef_Int)
	if !ok {
		that2, ok := that.(FieldValueDef_Int)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FieldValueDef_Int")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FieldValueDef_Int but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FieldValueDef_Int but is not nil && this == nil")
	}
	if this.Int != that1.Int {
		return fmt.Errorf("Int this(%v) Not Equal that(%v)", this.Int, that1.Int)
	}
	return nil
}
func (this *FieldValueDef_Float) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FieldValueDef_Float)
	if !ok {
		that2, ok := that.(FieldValueDef_Float)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FieldValueDef_Float")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FieldValueDef_Float but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FieldValueDef_Float but is not nil && this == nil")
	}
	if this.Float != that1.Float {
		return fmt.Errorf("Float this(%v) Not Equal that(%v)", this.Float, that1.Float)
	}
	return nil
}
func (this *FieldValueDef_Bool) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FieldValueDef_Bool)
	if !ok {
		that2, ok := that.(FieldValueDef_Bool)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FieldValueDef_Bool")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FieldValueDef_Bool but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FieldValueDef_Bool but is not nil && this == nil")
	}
	if this.Bool != that1.Bool {
		return fmt.Errorf("Bool this(%v) Not Equal that(%v)", this.Bool, that1.Bool)
	}
	return nil
}
func (this *FieldValueDef_List) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FieldValueDef_List)
	if !ok {
		that2, ok := that.(FieldValueDef_List)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FieldValueDef_List")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FieldValueDef_List but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FieldValueDef_List but is not nil && this == nil")
	}
	if !this.List.Equal(that1.List) {
		return fmt.Errorf("List this(%v) Not Equal that(%v)", this.List, that1.List)
	}
	return nil
}
func (this *FieldValueDef) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldValueDef)
	if !ok {
		that2, ok := that.(FieldValueDef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Value == nil {
		if this.Value != nil {
			return false
		}
	} else if this.Value == nil {
		return false
	} else if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *FieldValueDef_String_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldValueDef_String_)
	if !ok {
		that2, ok := that.(FieldValueDef_String_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.String_ != that1.String_ {
		return false
	}
	return true
}
func (this *FieldValueDef_Byte) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldValueDef_Byte)
	if !ok {
		that2, ok := that.(FieldValueDef_Byte)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Byte, that1.Byte) {
		return false
	}
	return true
}
func (this *FieldValueDef_Int) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldValueDef_Int)
	if !ok {
		that2, ok := that.(FieldValueDef_Int)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Int != that1.Int {
		return false
	}
	return true
}
func (this *FieldValueDef_Float) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldValueDef_Float)
	if !ok {
		that2, ok := that.(FieldValueDef_Float)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Float != that1.Float {
		return false
	}
	return true
}
func (this *FieldValueDef_Bool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldValueDef_Bool)
	if !ok {
		that2, ok := that.(FieldValueDef_Bool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Bool != that1.Bool {
		return false
	}
	return true
}
func (this *FieldValueDef_List) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldValueDef_List)
	if !ok {
		that2, ok := that.(FieldValueDef_List)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.List.Equal(that1.List) {
		return false
	}
	return true
}
func (this *FieldValueDef_ListValueDef) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FieldValueDef_ListValueDef)
	if !ok {
		that2, ok := that.(FieldValueDef_ListValueDef)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FieldValueDef_ListValueDef")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FieldValueDef_ListValueDef but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FieldValueDef_ListValueDef but is not nil && this == nil")
	}
	if len(this.String_) != len(that1.String_) {
		return fmt.Errorf("String_ this(%v) Not Equal that(%v)", len(this.String_), len(that1.String_))
	}
	for i := range this.String_ {
		if this.String_[i] != that1.String_[i] {
			return fmt.Errorf("String_ this[%v](%v) Not Equal that[%v](%v)", i, this.String_[i], i, that1.String_[i])
		}
	}
	if len(this.Bytes) != len(that1.Bytes) {
		return fmt.Errorf("Bytes this(%v) Not Equal that(%v)", len(this.Bytes), len(that1.Bytes))
	}
	for i := range this.Bytes {
		if !bytes.Equal(this.Bytes[i], that1.Bytes[i]) {
			return fmt.Errorf("Bytes this[%v](%v) Not Equal that[%v](%v)", i, this.Bytes[i], i, that1.Bytes[i])
		}
	}
	if len(this.Int64) != len(that1.Int64) {
		return fmt.Errorf("Int64 this(%v) Not Equal that(%v)", len(this.Int64), len(that1.Int64))
	}
	for i := range this.Int64 {
		if this.Int64[i] != that1.Int64[i] {
			return fmt.Errorf("Int64 this[%v](%v) Not Equal that[%v](%v)", i, this.Int64[i], i, that1.Int64[i])
		}
	}
	if len(this.Float) != len(that1.Float) {
		return fmt.Errorf("Float this(%v) Not Equal that(%v)", len(this.Float), len(that1.Float))
	}
	for i := range this.Float {
		if this.Float[i] != that1.Float[i] {
			return fmt.Errorf("Float this[%v](%v) Not Equal that[%v](%v)", i, this.Float[i], i, that1.Float[i])
		}
	}
	if len(this.Bool) != len(that1.Bool) {
		return fmt.Errorf("Bool this(%v) Not Equal that(%v)", len(this.Bool), len(that1.Bool))
	}
	for i := range this.Bool {
		if this.Bool[i] != that1.Bool[i] {
			return fmt.Errorf("Bool this[%v](%v) Not Equal that[%v](%v)", i, this.Bool[i], i, that1.Bool[i])
		}
	}
	return nil
}
func (this *FieldValueDef_ListValueDef) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldValueDef_ListValueDef)
	if !ok {
		that2, ok := that.(FieldValueDef_ListValueDef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.String_) != len(that1.String_) {
		return false
	}
	for i := range this.String_ {
		if this.String_[i] != that1.String_[i] {
			return false
		}
	}
	if len(this.Bytes) != len(that1.Bytes) {
		return false
	}
	for i := range this.Bytes {
		if !bytes.Equal(this.Bytes[i], that1.Bytes[i]) {
			return false
		}
	}
	if len(this.Int64) != len(that1.Int64) {
		return false
	}
	for i := range this.Int64 {
		if this.Int64[i] != that1.Int64[i] {
			return false
		}
	}
	if len(this.Float) != len(that1.Float) {
		return false
	}
	for i := range this.Float {
		if this.Float[i] != that1.Float[i] {
			return false
		}
	}
	if len(this.Bool) != len(that1.Bool) {
		return false
	}
	for i := range this.Bool {
		if this.Bool[i] != that1.Bool[i] {
			return false
		}
	}
	return true
}
func (this *FieldValueDef) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&sol.FieldValueDef{")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FieldValueDef_String_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&sol.FieldValueDef_String_{` +
		`String_:` + fmt.Sprintf("%#v", this.String_) + `}`}, ", ")
	return s
}
func (this *FieldValueDef_Byte) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&sol.FieldValueDef_Byte{` +
		`Byte:` + fmt.Sprintf("%#v", this.Byte) + `}`}, ", ")
	return s
}
func (this *FieldValueDef_Int) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&sol.FieldValueDef_Int{` +
		`Int:` + fmt.Sprintf("%#v", this.Int) + `}`}, ", ")
	return s
}
func (this *FieldValueDef_Float) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&sol.FieldValueDef_Float{` +
		`Float:` + fmt.Sprintf("%#v", this.Float) + `}`}, ", ")
	return s
}
func (this *FieldValueDef_Bool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&sol.FieldValueDef_Bool{` +
		`Bool:` + fmt.Sprintf("%#v", this.Bool) + `}`}, ", ")
	return s
}
func (this *FieldValueDef_List) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&sol.FieldValueDef_List{` +
		`List:` + fmt.Sprintf("%#v", this.List) + `}`}, ", ")
	return s
}
func (this *FieldValueDef_ListValueDef) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&sol.FieldValueDef_ListValueDef{")
	s = append(s, "String_: "+fmt.Sprintf("%#v", this.String_)+",\n")
	s = append(s, "Bytes: "+fmt.Sprintf("%#v", this.Bytes)+",\n")
	s = append(s, "Int64: "+fmt.Sprintf("%#v", this.Int64)+",\n")
	s = append(s, "Float: "+fmt.Sprintf("%#v", this.Float)+",\n")
	s = append(s, "Bool: "+fmt.Sprintf("%#v", this.Bool)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFieldValueDef(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *FieldValueDef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldValueDef) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		nn1, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *FieldValueDef_String_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xa
	i++
	i = encodeVarintFieldValueDef(dAtA, i, uint64(len(m.String_)))
	i += copy(dAtA[i:], m.String_)
	return i, nil
}
func (m *FieldValueDef_Byte) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Byte != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFieldValueDef(dAtA, i, uint64(len(m.Byte)))
		i += copy(dAtA[i:], m.Byte)
	}
	return i, nil
}
func (m *FieldValueDef_Int) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x18
	i++
	i = encodeVarintFieldValueDef(dAtA, i, uint64(m.Int))
	return i, nil
}
func (m *FieldValueDef_Float) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x25
	i++
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Float))))
	i += 4
	return i, nil
}
func (m *FieldValueDef_Bool) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x28
	i++
	if m.Bool {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *FieldValueDef_List) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.List != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintFieldValueDef(dAtA, i, uint64(m.List.Size()))
		n2, err := m.List.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *FieldValueDef_ListValueDef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldValueDef_ListValueDef) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.String_) > 0 {
		for _, s := range m.String_ {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Bytes) > 0 {
		for _, b := range m.Bytes {
			dAtA[i] = 0x12
			i++
			i = encodeVarintFieldValueDef(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.Int64) > 0 {
		dAtA4 := make([]byte, len(m.Int64)*10)
		var j3 int
		for _, num1 := range m.Int64 {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFieldValueDef(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if len(m.Float) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFieldValueDef(dAtA, i, uint64(len(m.Float)*4))
		for _, num := range m.Float {
			f5 := math.Float32bits(float32(num))
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f5))
			i += 4
		}
	}
	if len(m.Bool) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintFieldValueDef(dAtA, i, uint64(len(m.Bool)))
		for _, b := range m.Bool {
			if b {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	return i, nil
}

func encodeVarintFieldValueDef(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedFieldValueDef(r randyFieldValueDef, easy bool) *FieldValueDef {
	this := &FieldValueDef{}
	oneofNumber_Value := []int32{1, 2, 3, 4, 5, 6}[r.Intn(6)]
	switch oneofNumber_Value {
	case 1:
		this.Value = NewPopulatedFieldValueDef_String_(r, easy)
	case 2:
		this.Value = NewPopulatedFieldValueDef_Byte(r, easy)
	case 3:
		this.Value = NewPopulatedFieldValueDef_Int(r, easy)
	case 4:
		this.Value = NewPopulatedFieldValueDef_Float(r, easy)
	case 5:
		this.Value = NewPopulatedFieldValueDef_Bool(r, easy)
	case 6:
		this.Value = NewPopulatedFieldValueDef_List(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFieldValueDef_String_(r randyFieldValueDef, easy bool) *FieldValueDef_String_ {
	this := &FieldValueDef_String_{}
	this.String_ = string(randStringFieldValueDef(r))
	return this
}
func NewPopulatedFieldValueDef_Byte(r randyFieldValueDef, easy bool) *FieldValueDef_Byte {
	this := &FieldValueDef_Byte{}
	v1 := r.Intn(100)
	this.Byte = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Byte[i] = byte(r.Intn(256))
	}
	return this
}
func NewPopulatedFieldValueDef_Int(r randyFieldValueDef, easy bool) *FieldValueDef_Int {
	this := &FieldValueDef_Int{}
	this.Int = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Int *= -1
	}
	return this
}
func NewPopulatedFieldValueDef_Float(r randyFieldValueDef, easy bool) *FieldValueDef_Float {
	this := &FieldValueDef_Float{}
	this.Float = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Float *= -1
	}
	return this
}
func NewPopulatedFieldValueDef_Bool(r randyFieldValueDef, easy bool) *FieldValueDef_Bool {
	this := &FieldValueDef_Bool{}
	this.Bool = bool(bool(r.Intn(2) == 0))
	return this
}
func NewPopulatedFieldValueDef_List(r randyFieldValueDef, easy bool) *FieldValueDef_List {
	this := &FieldValueDef_List{}
	this.List = NewPopulatedFieldValueDef_ListValueDef(r, easy)
	return this
}
func NewPopulatedFieldValueDef_ListValueDef(r randyFieldValueDef, easy bool) *FieldValueDef_ListValueDef {
	this := &FieldValueDef_ListValueDef{}
	v2 := r.Intn(10)
	this.String_ = make([]string, v2)
	for i := 0; i < v2; i++ {
		this.String_[i] = string(randStringFieldValueDef(r))
	}
	v3 := r.Intn(10)
	this.Bytes = make([][]byte, v3)
	for i := 0; i < v3; i++ {
		v4 := r.Intn(100)
		this.Bytes[i] = make([]byte, v4)
		for j := 0; j < v4; j++ {
			this.Bytes[i][j] = byte(r.Intn(256))
		}
	}
	v5 := r.Intn(10)
	this.Int64 = make([]int64, v5)
	for i := 0; i < v5; i++ {
		this.Int64[i] = int64(r.Int63())
		if r.Intn(2) == 0 {
			this.Int64[i] *= -1
		}
	}
	v6 := r.Intn(10)
	this.Float = make([]float32, v6)
	for i := 0; i < v6; i++ {
		this.Float[i] = float32(r.Float32())
		if r.Intn(2) == 0 {
			this.Float[i] *= -1
		}
	}
	v7 := r.Intn(10)
	this.Bool = make([]bool, v7)
	for i := 0; i < v7; i++ {
		this.Bool[i] = bool(bool(r.Intn(2) == 0))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyFieldValueDef interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneFieldValueDef(r randyFieldValueDef) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringFieldValueDef(r randyFieldValueDef) string {
	v8 := r.Intn(100)
	tmps := make([]rune, v8)
	for i := 0; i < v8; i++ {
		tmps[i] = randUTF8RuneFieldValueDef(r)
	}
	return string(tmps)
}
func randUnrecognizedFieldValueDef(r randyFieldValueDef, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldFieldValueDef(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldFieldValueDef(dAtA []byte, r randyFieldValueDef, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateFieldValueDef(dAtA, uint64(key))
		v9 := r.Int63()
		if r.Intn(2) == 0 {
			v9 *= -1
		}
		dAtA = encodeVarintPopulateFieldValueDef(dAtA, uint64(v9))
	case 1:
		dAtA = encodeVarintPopulateFieldValueDef(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateFieldValueDef(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateFieldValueDef(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateFieldValueDef(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateFieldValueDef(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *FieldValueDef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *FieldValueDef_String_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.String_)
	n += 1 + l + sovFieldValueDef(uint64(l))
	return n
}
func (m *FieldValueDef_Byte) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Byte != nil {
		l = len(m.Byte)
		n += 1 + l + sovFieldValueDef(uint64(l))
	}
	return n
}
func (m *FieldValueDef_Int) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovFieldValueDef(uint64(m.Int))
	return n
}
func (m *FieldValueDef_Float) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 5
	return n
}
func (m *FieldValueDef_Bool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *FieldValueDef_List) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.List != nil {
		l = m.List.Size()
		n += 1 + l + sovFieldValueDef(uint64(l))
	}
	return n
}
func (m *FieldValueDef_ListValueDef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.String_) > 0 {
		for _, s := range m.String_ {
			l = len(s)
			n += 1 + l + sovFieldValueDef(uint64(l))
		}
	}
	if len(m.Bytes) > 0 {
		for _, b := range m.Bytes {
			l = len(b)
			n += 1 + l + sovFieldValueDef(uint64(l))
		}
	}
	if len(m.Int64) > 0 {
		l = 0
		for _, e := range m.Int64 {
			l += sovFieldValueDef(uint64(e))
		}
		n += 1 + sovFieldValueDef(uint64(l)) + l
	}
	if len(m.Float) > 0 {
		n += 1 + sovFieldValueDef(uint64(len(m.Float)*4)) + len(m.Float)*4
	}
	if len(m.Bool) > 0 {
		n += 1 + sovFieldValueDef(uint64(len(m.Bool))) + len(m.Bool)*1
	}
	return n
}

func sovFieldValueDef(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFieldValueDef(x uint64) (n int) {
	return sovFieldValueDef(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FieldValueDef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldValueDef{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldValueDef_String_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldValueDef_String_{`,
		`String_:` + fmt.Sprintf("%v", this.String_) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldValueDef_Byte) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldValueDef_Byte{`,
		`Byte:` + fmt.Sprintf("%v", this.Byte) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldValueDef_Int) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldValueDef_Int{`,
		`Int:` + fmt.Sprintf("%v", this.Int) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldValueDef_Float) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldValueDef_Float{`,
		`Float:` + fmt.Sprintf("%v", this.Float) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldValueDef_Bool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldValueDef_Bool{`,
		`Bool:` + fmt.Sprintf("%v", this.Bool) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldValueDef_List) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldValueDef_List{`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "FieldValueDef_ListValueDef", "FieldValueDef_ListValueDef", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldValueDef_ListValueDef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldValueDef_ListValueDef{`,
		`String_:` + fmt.Sprintf("%v", this.String_) + `,`,
		`Bytes:` + fmt.Sprintf("%v", this.Bytes) + `,`,
		`Int64:` + fmt.Sprintf("%v", this.Int64) + `,`,
		`Float:` + fmt.Sprintf("%v", this.Float) + `,`,
		`Bool:` + fmt.Sprintf("%v", this.Bool) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFieldValueDef(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FieldValueDef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFieldValueDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldValueDef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldValueDef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldValueDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFieldValueDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &FieldValueDef_String_{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Byte", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldValueDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFieldValueDef
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Value = &FieldValueDef_Byte{v}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldValueDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &FieldValueDef_Int{v}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Float", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Value = &FieldValueDef_Float{float32(math.Float32frombits(v))}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bool", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldValueDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Value = &FieldValueDef_Bool{b}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldValueDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFieldValueDef
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FieldValueDef_ListValueDef{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &FieldValueDef_List{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFieldValueDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFieldValueDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FieldValueDef_ListValueDef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFieldValueDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListValueDef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListValueDef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldValueDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFieldValueDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.String_ = append(m.String_, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldValueDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFieldValueDef
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytes = append(m.Bytes, make([]byte, postIndex-iNdEx))
			copy(m.Bytes[len(m.Bytes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFieldValueDef
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Int64 = append(m.Int64, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFieldValueDef
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFieldValueDef
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Int64) == 0 {
					m.Int64 = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFieldValueDef
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Int64 = append(m.Int64, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64", wireType)
			}
		case 4:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.Float = append(m.Float, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFieldValueDef
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFieldValueDef
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.Float) == 0 {
					m.Float = make([]float32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.Float = append(m.Float, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Float", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFieldValueDef
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Bool = append(m.Bool, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFieldValueDef
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFieldValueDef
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.Bool) == 0 {
					m.Bool = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFieldValueDef
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Bool = append(m.Bool, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Bool", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFieldValueDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFieldValueDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFieldValueDef(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFieldValueDef
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFieldValueDef
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFieldValueDef
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFieldValueDef
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFieldValueDef
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFieldValueDef(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFieldValueDef = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFieldValueDef   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("field_value_def.proto", fileDescriptor_field_value_def_3788bd7aa17b2384)
}

var fileDescriptor_field_value_def_3788bd7aa17b2384 = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xb1, 0x4a, 0x2b, 0x41,
	0x14, 0x86, 0xe7, 0xec, 0x64, 0x73, 0x93, 0xb9, 0x11, 0x64, 0xd0, 0x30, 0xa4, 0x38, 0x0e, 0xa9,
	0xa6, 0xda, 0x80, 0x46, 0x1f, 0x20, 0x88, 0x6c, 0x61, 0xb5, 0x85, 0x6d, 0x48, 0xc8, 0x6e, 0x58,
	0x18, 0x32, 0x92, 0x9d, 0x08, 0x76, 0x96, 0x96, 0x3e, 0x86, 0x8f, 0xe0, 0x23, 0x58, 0x58, 0xa4,
	0x4c, 0x99, 0xdd, 0xbc, 0x80, 0xa5, 0xa5, 0xcc, 0xac, 0x91, 0xd8, 0xcd, 0x77, 0xfe, 0x33, 0x3f,
	0x1f, 0x1c, 0x76, 0x9a, 0xe5, 0xa9, 0x9e, 0x8d, 0x1f, 0x26, 0x7a, 0x95, 0x8e, 0x67, 0x69, 0x16,
	0xdd, 0x2f, 0x8d, 0x35, 0x9c, 0x16, 0x46, 0xf7, 0xfa, 0x73, 0x33, 0x37, 0x03, 0x3f, 0x98, 0xae,
	0xb2, 0x81, 0x23, 0x0f, 0xfe, 0x55, 0x2f, 0xf6, 0x3f, 0x02, 0x76, 0x74, 0xe3, 0x2a, 0xee, 0x5c,
	0xc3, 0x75, 0x9a, 0x71, 0xc1, 0x9a, 0x85, 0x5d, 0xe6, 0x8b, 0xb9, 0x00, 0x09, 0xaa, 0x1d, 0x93,
	0xe4, 0x87, 0xf9, 0x09, 0x6b, 0x4c, 0x1f, 0x6d, 0x2a, 0x02, 0x09, 0xaa, 0x13, 0x93, 0xc4, 0x13,
	0xe7, 0x8c, 0xe6, 0x0b, 0x2b, 0xa8, 0x04, 0x45, 0x63, 0x92, 0x38, 0xe0, 0x5d, 0x16, 0x66, 0xda,
	0x4c, 0xac, 0x68, 0x48, 0x50, 0x41, 0x4c, 0x92, 0x1a, 0x7d, 0x83, 0x31, 0x5a, 0x84, 0x12, 0x54,
	0xcb, 0x37, 0x18, 0xa3, 0xf9, 0x25, 0x6b, 0xe8, 0xbc, 0xb0, 0xa2, 0x29, 0x41, 0xfd, 0x3f, 0x3f,
	0x8b, 0x0a, 0xa3, 0xa3, 0x3f, 0x4e, 0xd1, 0x6d, 0x5e, 0xd8, 0x3d, 0xb8, 0x6f, 0x6e, 0xbd, 0xf7,
	0x0c, 0xac, 0x73, 0x18, 0xf0, 0xee, 0x81, 0x39, 0x55, 0xed, 0x03, 0xef, 0xd0, 0x99, 0x16, 0x22,
	0x90, 0x54, 0x75, 0x92, 0x1a, 0xb8, 0x60, 0x61, 0xbe, 0xb0, 0x57, 0x43, 0x41, 0x25, 0x55, 0x74,
	0x14, 0x1c, 0x43, 0x52, 0x0f, 0x5c, 0xb2, 0xb7, 0xa7, 0x2a, 0xa8, 0x93, 0xda, 0xbf, 0xfb, 0xeb,
	0x4f, 0x55, 0xcb, 0x07, 0x9e, 0x47, 0xff, 0x58, 0xe8, 0x2d, 0x46, 0xc3, 0x4d, 0x89, 0x64, 0x5b,
	0x22, 0x7c, 0x96, 0x08, 0x5f, 0x25, 0xc2, 0x53, 0x85, 0xf0, 0x5a, 0x21, 0xbc, 0x55, 0x08, 0xef,
	0x15, 0xc2, 0xba, 0x42, 0xd8, 0x56, 0x08, 0x2f, 0x3b, 0x24, 0xeb, 0x1d, 0x92, 0xcd, 0x0e, 0xc9,
	0xb4, 0xe9, 0x6f, 0x71, 0xf1, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x6a, 0x91, 0x08, 0x12, 0xcd, 0x01,
	0x00, 0x00,
}
